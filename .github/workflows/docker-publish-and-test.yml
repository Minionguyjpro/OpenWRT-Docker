name: Docker

on:
  schedule:
    - cron: '44 0 * * *'
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

env:
  DOCKER_REGISTRY: docker.io
  GITHUB_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up repository in lowercase
        run: |
          repo="${{ github.repository }}"
          repo_lower=$(echo "$repo" | tr '[:upper:]' '[:lower:]')
          echo "repo_lower=$repo_lower" >> $GITHUB_ENV

      - name: Set output for use in another job
        id: output
        run: echo "repo_lower=${{ env.repo_lower }}" >> $GITHUB_ENV

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.6.0

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Log into registry ${{ env.DOCKER_REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Log into registry ${{ env.GITHUB_REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (Docker Registry)
        id: meta_docker
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          
      - name: Extract Docker metadata (GitHub Registry)
        id: meta_github
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.GITHUB_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image (Docker registry)
        id: build-and-push_docker
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_docker.outputs.tags }}
          labels: ${{ steps.meta_docker.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if:  ${{ github.event_name != 'release' }}
          
      - name: Build and push Docker image on release (Docker registry)
        id: build-and-push_docker_release
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ env.repo_lower }}:latest
          labels: ${{ steps.meta_docker.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: ${{ github.event_name == 'release' }}
          
      - name: Build and push Docker image (GitHub registry)
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_github.outputs.tags }}
          labels: ${{ steps.meta_github.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: ${{ github.event_name != 'release' }}
      
      - name: Build and push Docker image on release (GitHub registry)
        id: build-and-push_release
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.repo_lower }}:latest
          labels: ${{ steps.meta_github.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: ${{ github.event_name == 'release' }}

    outputs:
      repo_lower: ${{ env.repo_lower }}

  test:
    needs: build
    runs-on: ubuntu-latest
    container: ${{ needs.build.outputs.repo_lower }}:latest
    steps:
      - name: Check OpenWRT banner
        run: cat /etc/banner
